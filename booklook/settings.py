"""
Django settings for booklook project.
Generated by 'django-admin startproject' using Django 5.1.7.
"""

from pathlib import Path
import os

BASE_DIR = Path(__file__).resolve().parent.parent

# === Seguridad / Debug ===
SECRET_KEY = 'django-insecure-(^^%(0_h0e9f%b_gaiz9&ob0t+5g$526zp6&^o=6&ddyh*z7!m'
DEBUG = os.getenv("DEBUG", "true").lower() == "true"
ALLOWED_HOSTS = os.getenv("ALLOWED_HOSTS", "").split(",") if os.getenv("ALLOWED_HOSTS") else ["*"]

# === Apps ===
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'app',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'booklook.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],  # si usas plantillas globales, añade rutas aquí
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'booklook.wsgi.application'

# === Base de datos (por ahora sqlite) ===
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

SQLITE_PATH = os.getenv("SQLITE_PATH")
if SQLITE_PATH:
    DATABASES["default"]["NAME"] = SQLITE_PATH

# === Password validators ===
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',},
]

# === i18n ===
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# === Static & Media ===
# Static (tu proyecto ya lo tenía)
STATIC_URL = os.getenv("STATIC_URL", "/static/")
STATIC_ROOT = os.getenv("STATIC_ROOT", str(BASE_DIR / "staticfiles"))

# Media (nuevo)
MEDIA_URL = os.getenv("MEDIA_URL", "/media/")
MEDIA_ROOT = os.getenv("MEDIA_ROOT", str(BASE_DIR / "media"))

# Subcarpetas lógicas para upload_to
UPLOADS_DIR_AUTHORS = os.getenv("UPLOADS_DIR_AUTHORS", "authors/")
UPLOADS_DIR_BOOKS = os.getenv("UPLOADS_DIR_BOOKS", "covers/")

# Flag para servir media desde Django en dev (o desactivar en prod con proxy)
SERVE_MEDIA = os.getenv("SERVE_MEDIA", "true").lower() == "true"
# Permite desactivar el servido de archivos estáticos por Django cuando existe un reverse proxy
SERVE_STATIC = os.getenv("SERVE_STATIC", "true").lower() == "true"
os.makedirs(MEDIA_ROOT, exist_ok=True)

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# ===== OpenSearch ====
SEARCH_ENABLED = os.getenv("SEARCH_ENABLED", "false").lower() == "true"
OPENSEARCH_HOST = os.getenv("OPENSEARCH_HOST", "localhost")
OPENSEARCH_PORT = int(os.getenv("OPENSEARCH_PORT", "9200"))
OPENSEARCH_USER = os.getenv("OPENSEARCH_USER", "")
OPENSEARCH_PASS = os.getenv("OPENSEARCH_PASS", "")
OPENSEARCH_USE_TLS = os.getenv("OPENSEARCH_USE_TLS", "false").lower() == "true"
OPENSEARCH_VERIFY_TLS = os.getenv("OPENSEARCH_VERIFY_TLS", "false").lower() == "true"
OS_INDEX_BOOKS = os.getenv("OS_INDEX_BOOKS", "books")
OS_INDEX_REVIEWS = os.getenv("OS_INDEX_REVIEWS", "reviews")


# ===== Redis Cache Configuration =====
REDIS_URL = os.getenv("REDIS_URL")
if REDIS_URL:
    CACHES = {
        "default": {
            "BACKEND": "django_redis.cache.RedisCache",
            "LOCATION": REDIS_URL,
            "OPTIONS": {
                "CLIENT_CLASS": "django_redis.client.DefaultClient",
                # Ignore connection errors so app still works without Redis
                "IGNORE_EXCEPTIONS": True,
            },
        }
    }
else:
    CACHES = {
        "default": {
            "BACKEND": "django.core.cache.backends.locmem.LocMemCache",
            "LOCATION": "unique",
        }
    }

# default cache timeout (seconds)
CACHE_TTL = int(os.getenv("CACHE_TTL", "300"))